version: "2.2"

networks:
  supportvectors1:
    driver: bridge

services:
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: es01
    volumes:
      - ${ES1_VOLUME}:/usr/share/elasticsearch/data
    ports:
      - ${ELASTICSEARCH_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02
      - discovery.seed_hosts=es02
      - ELASTIC_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - xpack.license.self_generated.type=${LICENSE}
    networks:
      - supportvectors1
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1

  es02:
    depends_on:
      - es01
    container_name: es02
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - ${ES2_VOLUME}:/usr/share/elasticsearch/data
    environment:
      - node.name=es02
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02
      - discovery.seed_hosts=es01
      - ELASTIC_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - xpack.license.self_generated.type=${LICENSE}
    networks:
      - supportvectors1
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - ${KIBANA_VOLUME}:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
    networks:
      - supportvectors1
    mem_limit: ${MEM_LIMIT}

  postgres:
    container_name: ${POSTGRES_HOST}
    image: postgres:14.1-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_SSLMODE='disable'
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes: 
      - ${POSTGRES_VOLUME}:/var/lib/postgresql/data
    networks:
      - supportvectors1

  tika1:
    container_name: tika1
    image: apache/tika:2.7.0.0
    ports:
      - "9997:9998"
    environment:
      - TIKA_SERVER_LOG=trace
      - HOSTNAME=tika1
    networks:
      - supportvectors1

  tika2:
    container_name: tika2
    image: apache/tika:2.7.0.0
    ports:
      - "9998:9998"
    environment:
      - TIKA_SERVER_LOG=trace
      - HOSTNAME=tika2
    networks:
      - supportvectors1

  tikaservers:
    container_name: ${TIKASERVERS_HOST}
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "${TIKASERVERS_PORT}:80"
    networks:
      - supportvectors1
    depends_on:
      - tika1
      - tika2

  jupyter:
    container_name: ${JUPYTER_HOST}
    image: jupyter/datascience-notebook:latest
    ports:
      - "${JUPYTER_PORT}:8888"
    volumes:
      - ${JUPYTER_VOLUME}:/home/prakash/work
    environment:
      - JUPYTER_ENABLE_LAB=yes  # Set this to "no" if you want classic notebook
    networks:
      - supportvectors1
    deploy:
      resources:
        reservations:
          devices:
          - driver: nvidia
            count: 1
            capabilities: [gpu]

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - supportvectors1
    volumes:
      - ${ZOOKEEPER_VOLUME}:/var/lib/zookeeper/data
      - ${ZOOKEEPER_VOLUME_LOG}:/var/lib/zookeeper/log

  broker:
    image: confluentinc/cp-kafka:7.5.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    networks:
      - supportvectors1
    volumes:
      - ${BROKER_VOLUME}:/var/lib/broker/data

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - supportvectors1
    volumes:
      - ${SCHEMAREGISTRY_VOLUME}:/var/lib/schemaregistry/data

  connect:
    image: cnfldemos/kafka-connect-datagen:0.6.2-7.5.0
    hostname: connect
    container_name: connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    networks:
      - supportvectors1

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.5.0
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
      - connect
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "broker:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_KSQL_CONNECT_URL: "http://connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
    networks:
      - supportvectors1

  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.5.0
    depends_on:
      - broker
      - schema-registry
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
    networks:
      - supportvectors1

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.5.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
      - connect
      - ksqldb-server
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    networks:
      - supportvectors1
    volumes:
      - ${CONTROLCENTER_VOLUME}:/var/lib/controlcenter/data

  redis:
    container_name: ${REDIS_HOST}
    image: redis:latest
    ports:
      - "${REDIS_PORT}:6379"
    command: /bin/sh -c "redis-server --requirepass ${REDIS_PASSWD}"
    volumes: 
      - ${REDIS_VOLUME}:/data
    networks:
      - supportvectors1

  rayhead:
    hostname: rayhead
    container_name: rayhead
    image: rayproject/ray:latest
    command: ["ray", "start", "-v", "--head", "--port=6379", "--block", "--dashboard-host=0.0.0.0"]
    environment:
      - "RAY_ADDRESS=0.0.0.0"
      - "REDISPASSWORD=${REDIS_PASSWD}"
    ports:
      - "8265:8265"
    depends_on:
      - redis
    shm_size: "10.24gb"
    volumes:
      - /docker/rayhead:/root/ray
    networks:
      - supportvectors1

  rayworker1:
    hostname: rayworker1
    container_name: rayworker1
    image: rayproject/ray:latest
    depends_on:
      - rayhead
    command: ["ray", "start", "--address=rayhead:6379", "--block"]
    environment:
      - "RAY_ADDRESS=rayhead:6379"
      - "REDISPASSWORD=${REDIS_PASSWD}"
    shm_size: "10.24gb"
    volumes:
      - /docker/rayworker:/root/ray
    networks:
      - supportvectors1

  rayworker2:
    hostname: rayworker2
    container_name: rayworker2
    image: rayproject/ray:latest
    depends_on:
      - rayhead
    command: ["ray", "start", "--address=rayhead:6379", "--block"]
    environment:
      - "RAY_ADDRESS=rayhead:6379"
      - "REDISPASSWORD=${REDIS_PASSWD}"
    shm_size: "10.24gb"
    volumes:
      - /docker/rayworker:/root/ray
    networks:
      - supportvectors1

  rayworker3:
    hostname: rayworker3
    container_name: rayworker3
    image: rayproject/ray:latest
    depends_on:
      - rayhead
    command: ["ray", "start", "--address=rayhead:6379", "--block"]
    environment:
      - "RAY_ADDRESS=rayhead:6379"
      - "REDISPASSWORD=${REDIS_PASSWD}"
    shm_size: "10.24gb"
    volumes:
      - /docker/rayworker:/root/ray
    networks:
      - supportvectors1
